{"version":3,"file":"myprogress_view.min.js","sources":["../src/myprogress_view.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport Autocomplete from 'core/form-autocomplete';\nimport Notification from 'core/notification';\nimport * as Str from 'core/str';\nimport Templates from 'core/templates';\nimport {computeSummaryDataForTopGroups} from './myprogress';\n\nconst Selectors = {\n    DATA_CARRIER: '[data-studentid]',\n    INPUT_STUDENT: '[data-input=student-selection]',\n    INPUT_TOGGLE_DETAILS: '[data-input=toggle-details]',\n    CONTAINER_FOOTER_PROGRESS: '[data-container=footer-progress]',\n    CONTAINER_LOADER: '[data-container=loader]',\n    CONTAINER_MAIN_PROGRESS: '[data-container=main-progress]',\n    CONTAINER_TOPGROUP: '[data-container=topgroup]',\n    CONTAINER_SUMMARY: '[data-container=progress-summary]',\n    CONTAINER_DETAILS: '[data-container=progress-details]',\n};\n\nconst STRING_KEYS = [\n    'user-progress-search-placeholder',\n    'user-progress-no-selection',\n    'show-progress-details',\n    'hide-progress-details',\n    'course-singular',\n    'course-plural',\n    'course-done',\n    'course-done-plural',\n    'course-inprogress',\n    'course-inprogress-plural',\n    'course-todo',\n    'course-todo-plural',\n];\n\n/**\n * Fetch translated strings.\n *\n * Str.get_strings return strings in a array, which makes it impractical to retrieve later on.\n * This function remaps data into a map with their respective key.\n *\n * @return {object} a map of i18n strings indexed by key\n */\nasync function fetchStrings() {\n    const strings = await Str.get_strings(\n        STRING_KEYS.map(key => ({key, component: 'theme_padplus'}))\n    );\n    return strings.reduce((obj, value, index) => {\n        obj[STRING_KEYS[index]] = value;\n        return obj;\n    }, {});\n}\n\n/**\n * Setup JS interactions for My Progress page.\n *\n * @param {Element} root\n */\nexport async function setupPage(root) {\n    const STRINGS = await fetchStrings();\n    const dataCarrier = root.querySelector(Selectors.DATA_CARRIER);\n    const studentId = dataCarrier.getAttribute('data-studentid');\n\n    if (studentId) {\n        // Student view: load and display progress immediately\n        updateProgress(root, STRINGS, studentId);\n\n    } else {\n        // Professional view: setup autocomplete select box for students\n\n        // eslint-disable-next-line promise/catch-or-return\n        Autocomplete.enhance(\n            Selectors.INPUT_STUDENT,\n            false, // No tags\n            false, // No ajax\n            STRINGS['user-progress-search-placeholder'],\n            false, // Case insensitive\n            true, // Show suggestions on keystroke\n            STRINGS['user-progress-no-selection'],\n            true, // Close after select\n        ).then(() => {\n            // Hide Autocomplete selection box, keep it for screen reader only\n            const studentSelectionBox = root.querySelector('.form-autocomplete-selection');\n            studentSelectionBox.classList.add('sr-only');\n            // Deselect Autocomplete default selection on first option by triggering the empty option\n            const defaultOption = root.querySelector('[data-value=\"\"]');\n            defaultOption.click();\n\n            // Setup autocomplete change listener\n            const studentSelection = root.querySelector(Selectors.INPUT_STUDENT);\n            studentSelection.addEventListener('change', () => {\n                const studentId = studentSelection.value;\n                dataCarrier.setAttribute('data-studentid', studentId);\n                if (studentId) {\n                    const contextId = dataCarrier.getAttribute('data-contextid');\n                    updateProgress(root, STRINGS, studentId, contextId);\n                } else {\n                    // Deselection, hide current content\n                    toggleDisplay(root, Selectors.CONTAINER_MAIN_PROGRESS);\n                }\n            });\n\n            // Autocomplete setup triggers flash of unstyled components, so the whole form & export button is hidden at first.\n            const hiddenContainers = root.querySelectorAll('.hidden-when-initializing');\n            hiddenContainers.forEach(element => {\n                element.classList.remove('hidden-when-initializing');\n            });\n\n            // Hide loader, setup is complete and there is no request in progress\n            toggleDisplay(root, Selectors.CONTAINER_LOADER);\n\n            return;\n        });\n    }\n}\n\n/**\n * Fetch progress data for given student and render progress component.\n *\n * @param {Element} root root element of component\n * @param {object}  STRINGS map of i18n strings\n * @param {string}  userid user id\n * @param {string}  contextid context id, optional\n */\nfunction updateProgress(root, STRINGS, userid, contextid = undefined) {\n    // Hide current content (if any) and export container, and show the loader.\n    toggleDisplay(root, Selectors.CONTAINER_MAIN_PROGRESS, Selectors.CONTAINER_LOADER);\n    toggleDisplay(root, Selectors.CONTAINER_FOOTER_PROGRESS);\n\n    // Fetch progress data for given user\n    Ajax.call([{\n        methodname: 'local_padplusextensions_progress_overview',\n        args: {userid, contextid},\n    }])[0].then((data) => {\n        // Compute summary data from response\n        const topgroupsData = computeSummaryDataForTopGroups(data.progress, STRINGS);\n\n        // Build template context for rendering\n        const context = {\n            username: data.username,\n            forprofessional: contextid !== undefined,\n            totalByStatus: data.totalByStatus,\n            ...topgroupsData,\n        };\n        return Templates.renderForPromise('local_padplusextensions/myprogress_content', context).then(({html, js}) => {\n            Templates.replaceNodeContents(Selectors.CONTAINER_MAIN_PROGRESS, html, js);\n            // Setup handlers once toggle buttons have been rendered\n            setupToggleDetails(root, STRINGS);\n            // Rendering done, time to hide the loader and show the content & export container.\n            toggleDisplay(root, Selectors.CONTAINER_LOADER, Selectors.CONTAINER_MAIN_PROGRESS);\n            toggleDisplay(root, Selectors.CONTAINER_LOADER, Selectors.CONTAINER_FOOTER_PROGRESS);\n            return;\n        });\n    }).catch(Notification.exception);\n}\n\n/**\n * Setup event handlers on all 'toggle details' button links.\n *\n * By default summary containers are opened and details container are closed.\n *\n * @param {Element} root root element of component\n * @param {object}  STRINGS map of i18n strings\n */\nfunction setupToggleDetails(root, STRINGS) {\n    const toggleDetailsElements = root.querySelectorAll(Selectors.INPUT_TOGGLE_DETAILS);\n\n    toggleDetailsElements.forEach(element => {\n        const topgroup = element.closest(Selectors.CONTAINER_TOPGROUP);\n        const summaryId = topgroup.querySelector(Selectors.CONTAINER_SUMMARY).id;\n        const detailsId = topgroup.querySelector(Selectors.CONTAINER_DETAILS).id;\n        element.setAttribute('aria-controls', `${summaryId} ${detailsId}`);\n\n        // Set default state to closed details (opened summary)\n        hideDetails(element, topgroup, STRINGS);\n\n        element.addEventListener('click', (e) => {\n            e.preventDefault();\n\n            const toggleElement = e.target;\n            const detailsState = toggleElement.getAttribute('data-details');\n            if (detailsState === 'closed') {\n                showDetails(toggleElement, topgroup, STRINGS);\n            } else {\n                hideDetails(toggleElement, topgroup, STRINGS);\n            }\n        });\n    });\n}\n\n/**\n * Show details container and hide summary container in given topgroup container.\n *\n * @param {Element} toggleElement\n * @param {Element} topgroupContainer\n * @param {array}   STRINGS\n */\nfunction showDetails(toggleElement, topgroupContainer, STRINGS) {\n    toggleDisplay(topgroupContainer, Selectors.CONTAINER_SUMMARY, Selectors.CONTAINER_DETAILS);\n    toggleElement.textContent = STRINGS['hide-progress-details'];\n    toggleElement.classList.remove('toggle-unexpanded-icon');\n    toggleElement.classList.add('toggle-expanded-icon');\n    toggleElement.setAttribute('data-details', 'opened');\n}\n\n/**\n * Show summary container and hide details container in given topgroup container.\n *\n * @param {Element} toggleElement\n * @param {Element} topgroupContainer\n * @param {array}   STRINGS\n */\nfunction hideDetails(toggleElement, topgroupContainer, STRINGS) {\n    toggleDisplay(topgroupContainer, Selectors.CONTAINER_DETAILS, Selectors.CONTAINER_SUMMARY);\n    toggleElement.textContent = STRINGS['show-progress-details'];\n    toggleElement.classList.remove('toggle-expanded-icon');\n    toggleElement.classList.add('toggle-unexpanded-icon');\n    toggleElement.setAttribute('data-details', 'closed');\n}\n\n/**\n * Toggle display between given elements, e.g. for a loader/content couple.\n *\n * @param {Element} root\n * @param {string}  selectorToHide\n * @param {string}  selectorToShow\n */\nfunction toggleDisplay(root, selectorToHide, selectorToShow = null) {\n    const elementToHide = root.querySelector(selectorToHide);\n    elementToHide.style.display = 'none';\n\n    if (selectorToShow) {\n        const elementToShow = root.querySelector(selectorToShow);\n        elementToShow.style.display = 'block';\n    }\n}\n"],"names":["Selectors","STRING_KEYS","fetchStrings","Str","get_strings","map","key","component","strings","reduce","obj","value","index","root","STRINGS","dataCarrier","querySelector","studentId","getAttribute","updateProgress","enhance","then","classList","add","click","studentSelection","addEventListener","setAttribute","contextId","toggleDisplay","querySelectorAll","forEach","element","remove","userid","contextid","undefined","call","methodname","args","data","topgroupsData","progress","context","username","forprofessional","totalByStatus","Templates","renderForPromise","html","js","replaceNodeContents","setupToggleDetails","catch","Notification","exception","topgroup","closest","summaryId","id","detailsId","hideDetails","e","preventDefault","toggleElement","target","topgroupContainer","textContent","showDetails","selectorToHide","selectorToShow","elementToHide","style","display","elementToShow"],"mappings":"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"}