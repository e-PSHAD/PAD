define("local_padplusextensions/myprogress",["exports"],(function(_exports){function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.computeSummaryDataForTopGroups=function(progress,STRINGS){var labelForStatus=function(status){var count=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;switch(status){case"done":return count>1?STRINGS["course-done-plural"]:STRINGS["course-done"];case"inprogress":return count>1?STRINGS["course-inprogress-plural"]:STRINGS["course-inprogress"];default:return count>1?STRINGS["course-todo-plural"]:STRINGS["course-todo"]}};return{topgroups:progress.map((function(topGroup){var groupByStatus=topGroup.modules.reduce((function(groups,module){return module.courses.forEach((function(course){groups[course.progress.status].push(course)})),groups}),{done:[],inprogress:[],todo:[]}),coursesbystatus=Object.entries(groupByStatus).map((function(_ref){var arr,i,_ref2=(i=2,function(arr){if(Array.isArray(arr))return arr}(arr=_ref)||function(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}}(arr,i)||function(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),status=_ref2[0],group=_ref2[1];return{status:status,count:group.length,grouplabel:labelForStatus(status,group.length),courses:group.map((function(_ref3){var fullname=_ref3.fullname,viewurl=_ref3.viewurl,progress=_ref3.progress;return{namestatuslabel:"".concat(fullname," - ").concat(labelForStatus(progress.status)),viewurl:viewurl,progress:progress}}))}})),topGroupTotal=coursesbystatus.reduce((function(total,statusGroup){return total+statusGroup.count}),0),topgrouptotallabel="".concat(topGroupTotal," ").concat(topGroupTotal>1?STRINGS["course-plural"]:STRINGS["course-singular"]);return{topgroupid:topGroup.id,topgroupname:topGroup.name,topgrouptotallabel:topgrouptotallabel,modules:topGroup.modules,coursesbystatus:coursesbystatus}}))}}}));

//# sourceMappingURL=myprogress.min.js.map