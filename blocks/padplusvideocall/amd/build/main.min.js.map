{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * Handle click on button to start a video call.\n * This is used on profile pages only.\n *\n * @param {String} buttonId The id of the button element.\n */\nexport const handleVideoCallRequest = (buttonId) => {\n    const button = document.getElementById(buttonId);\n\n    button.addEventListener('click', function(e) {\n        const launchvideocallurl = button.getAttribute('href');\n        requestVideoCall(e, launchvideocallurl);\n    });\n};\n\n/**\n * Handle video form in block to start a video call.\n *\n * @param {String} videocallform The form element which contains data.\n */\nexport const handleVideoCallFormRequest = (videocallform) => {\n    const submit = videocallform.querySelector('input[type=submit]');\n\n    submit.addEventListener('click', function(e) {\n        const formData = new FormData(videocallform);\n        const meetingname = formData.get('videocallname');\n        const viewersid = formData.getAll('videocallviewers[]');\n        const launchvideocallurl = videocallform.getAttribute('action');\n        requestVideoCall(e, launchvideocallurl, viewersid, meetingname);\n    });\n};\n\n/**\n * Start a video call in a new window with the given launch URL and optional parameters.\n *\n * @param {String} e The user event which triggers the call.\n * @param {String} launchvideocallurl The base URL to start with.\n * @param {Array}  viewersid (optional) An array of user ids to invite.\n * @param {String} meetingname (optional) The meeting name.\n */\nexport const requestVideoCall = (e, launchvideocallurl, viewersid, meetingname) => {\n    e.preventDefault();\n\n    if (viewersid) {\n        const viewersparam = viewersid.join(',');\n        launchvideocallurl = `${launchvideocallurl}&viewersid=${viewersparam}`;\n    }\n    if (meetingname) {\n        launchvideocallurl = `${launchvideocallurl}&name=${meetingname}`;\n    }\n\n    window.open(launchvideocallurl);\n};\n\n/**\n * Setup JS interactions for VideoCall block.\n *\n * @param {Element} root\n */\nexport const setupVideoCallBlock = (root) => {\n    // Containers.\n    const containerSharedLinks = root.querySelector(\"[data-container=padplusvideocall-shared-links]\");\n\n    // Btns.\n    const btnReset = root.querySelector(\"[data-action=reset\");\n    const btnsCopy = root.querySelectorAll(\"[data-action=copy]\");\n    const btnsRadio = root.querySelectorAll('[name=padplusvideocall-mode]');\n\n    // Inputs.\n    const moderatorInput = root.querySelector(\"[data-input=moderator]\");\n    const viewerInput = root.querySelector(\"[data-input=viewer]\");\n\n    // Handle show & hide of the different blocks corresponding to the videocall modes: planned/unplanned.\n    btnsRadio.forEach(radio => {\n        const unplannedVideoCallGroup = root.querySelector('[data-container=padplusvideocall-unplanned]');\n        const plannedVideoCallGroup = root.querySelector('[data-container=padplusvideocall-planned]');\n        radio.addEventListener('change', event => {\n            if (event.target.value === 'planned') {\n                toggleDisplay(unplannedVideoCallGroup, plannedVideoCallGroup);\n            } else {\n                toggleDisplay(plannedVideoCallGroup, unplannedVideoCallGroup);\n            }\n        });\n    });\n\n    const initialRequestContainer = root.querySelector('[data-container=padplusvideocall-initial-links]');\n    const requestLinksButtons = root.querySelectorAll('[data-action=request-links]');\n    // Handle click on buttons to request videocall links. Both have the same behavior.\n    requestLinksButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            toggleDisplay(containerSharedLinks);\n            return requestNewMeetingLinks(root).then((data) => {\n                setInputValue(moderatorInput, data.moderatorurl);\n                setInputValue(viewerInput, data.viewerurl);\n                toggleDisplay(initialRequestContainer, containerSharedLinks);\n                return;\n            });\n        });\n    });\n\n    // Handle click on button to reset videocall block.\n    btnReset.addEventListener('click', function() {\n        toggleDisplay(containerSharedLinks, initialRequestContainer);\n        moderatorInput.setAttribute('value', '');\n        viewerInput.setAttribute('value', '');\n    });\n\n    // Handle click on buttons to copy videocall links.\n    btnsCopy.forEach(btnCopy => {\n        btnCopy.addEventListener('click', function() {\n            const user = btnCopy.getAttribute('data-input');\n            const input = root.querySelector(`[data-input=${user}]`);\n            const icon = root.querySelector(`[data-icon=${user}]`);\n            toggleDisplay(input, icon);\n            setTimeout(function() {\n                toggleDisplay(icon, input);\n            }, 1200);\n\n            navigator.clipboard.writeText(input.value);\n        });\n    });\n};\n\n/**\n * Toggle display between given elements.\n *\n * @param {Element} elementToHide\n * @param {Element} elementToShow\n */\nfunction toggleDisplay(elementToHide, elementToShow = null) {\n    elementToHide.classList.add('hidden');\n\n    if (elementToShow) {\n        elementToShow.classList.remove('hidden');\n    }\n}\n\n/**\n * Set input value and force cursor so that the string end appears in view.\n * Since value can be long URLs, user is more likely to see them change after each call.\n *\n * @param {Element} inputElement\n * @param {string} value\n */\nfunction setInputValue(inputElement, value) {\n    inputElement.setAttribute('value', value);\n    // Here goes some weird DOM/Javascript update stuff, first wait for DOM update\n    setTimeout(() => {\n        // Set cursor at end\n        inputElement.setSelectionRange(value.length, value.length);\n        // Put focus on element otherwise cursor won't show\n        inputElement.focus();\n        // Immediately blur focus because we don't want the input highlighted\n        inputElement.blur();\n    });\n}\n\n/**\n * Generate meeting links.\n *\n * @param {object} root Input that contains the contextid.\n * @returns {data}\n */\nfunction requestNewMeetingLinks(root) {\n    const contextid = root.querySelector('[data-contextid]').getAttribute('data-contextid');\n    return Ajax.call([{\n        methodname: 'block_padplusvideocall_generate_meeting_links',\n        args: {contextid},\n    }])[0].catch(Notification.exception);\n}\n"],"names":["buttonId","button","document","getElementById","addEventListener","e","launchvideocallurl","getAttribute","requestVideoCall","videocallform","querySelector","formData","FormData","meetingname","get","viewersid","getAll","preventDefault","viewersparam","join","window","open","toggleDisplay","elementToHide","elementToShow","classList","add","remove","setInputValue","inputElement","value","setAttribute","setTimeout","setSelectionRange","length","focus","blur","root","containerSharedLinks","btnReset","btnsCopy","querySelectorAll","btnsRadio","moderatorInput","viewerInput","forEach","radio","unplannedVideoCallGroup","plannedVideoCallGroup","event","target","initialRequestContainer","contextid","Ajax","call","methodname","args","catch","Notification","exception","requestNewMeetingLinks","then","data","moderatorurl","viewerurl","btnCopy","user","input","icon","navigator","clipboard","writeText"],"mappings":"6fAwBsC,SAACA,cAC7BC,OAASC,SAASC,eAAeH,UAEvCC,OAAOG,iBAAiB,SAAS,SAASC,OAChCC,mBAAqBL,OAAOM,aAAa,QAC/CC,iBAAiBH,EAAGC,4DASc,SAACG,eACxBA,cAAcC,cAAc,sBAEpCN,iBAAiB,SAAS,SAASC,OAChCM,SAAW,IAAIC,SAASH,eACxBI,YAAcF,SAASG,IAAI,iBAC3BC,UAAYJ,SAASK,OAAO,sBAC5BV,mBAAqBG,cAAcF,aAAa,UACtDC,iBAAiBH,EAAGC,mBAAoBS,UAAWF,qBAY9CL,iBAAmB,SAACH,EAAGC,mBAAoBS,UAAWF,gBAC/DR,EAAEY,iBAEEF,UAAW,KACLG,aAAeH,UAAUI,KAAK,KACpCb,6BAAwBA,yCAAgCY,cAExDL,cACAP,6BAAwBA,oCAA2BO,cAGvDO,OAAOC,KAAKf,yEA8EPgB,cAAcC,mBAAeC,qEAAgB,KAClDD,cAAcE,UAAUC,IAAI,UAExBF,eACAA,cAAcC,UAAUE,OAAO,mBAW9BC,cAAcC,aAAcC,OACjCD,aAAaE,aAAa,QAASD,OAEnCE,YAAW,WAEPH,aAAaI,kBAAkBH,MAAMI,OAAQJ,MAAMI,QAEnDL,aAAaM,QAEbN,aAAaO,uCA9Fc,SAACC,UAE1BC,qBAAuBD,KAAK3B,cAAc,kDAG1C6B,SAAWF,KAAK3B,cAAc,sBAC9B8B,SAAWH,KAAKI,iBAAiB,sBACjCC,UAAYL,KAAKI,iBAAiB,gCAGlCE,eAAiBN,KAAK3B,cAAc,0BACpCkC,YAAcP,KAAK3B,cAAc,uBAGvCgC,UAAUG,SAAQ,SAAAC,WACRC,wBAA0BV,KAAK3B,cAAc,+CAC7CsC,sBAAwBX,KAAK3B,cAAc,6CACjDoC,MAAM1C,iBAAiB,UAAU,SAAA6C,OACF,YAAvBA,MAAMC,OAAOpB,MACbR,cAAcyB,wBAAyBC,uBAEvC1B,cAAc0B,sBAAuBD,mCAK3CI,wBAA0Bd,KAAK3B,cAAc,mDACvB2B,KAAKI,iBAAiB,+BAE9BI,SAAQ,SAAA5C,QACxBA,OAAOG,iBAAiB,SAAS,kBAC7BkB,cAAcgB,+BAyEMD,UACtBe,UAAYf,KAAK3B,cAAc,oBAAoBH,aAAa,yBAC/D8C,cAAKC,KAAK,CAAC,CACdC,WAAY,gDACZC,KAAM,CAACJ,UAAAA,cACP,GAAGK,MAAMC,sBAAaC,WA7EXC,CAAuBvB,MAAMwB,MAAK,SAACC,MACtClC,cAAce,eAAgBmB,KAAKC,cACnCnC,cAAcgB,YAAakB,KAAKE,WAChC1C,cAAc6B,wBAAyBb,+BAOnDC,SAASnC,iBAAiB,SAAS,WAC/BkB,cAAcgB,qBAAsBa,yBACpCR,eAAeZ,aAAa,QAAS,IACrCa,YAAYb,aAAa,QAAS,OAItCS,SAASK,SAAQ,SAAAoB,SACbA,QAAQ7D,iBAAiB,SAAS,eACxB8D,KAAOD,QAAQ1D,aAAa,cAC5B4D,MAAQ9B,KAAK3B,oCAA6BwD,WAC1CE,KAAO/B,KAAK3B,mCAA4BwD,WAC9C5C,cAAc6C,MAAOC,MACrBpC,YAAW,WACPV,cAAc8C,KAAMD,SACrB,MAEHE,UAAUC,UAAUC,UAAUJ,MAAMrC"}