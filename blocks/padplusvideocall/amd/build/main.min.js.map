{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle click on button to start a video call.\n *\n * @param {String} buttonId The id of the button element.\n */\nexport const handleVideoCallRequest = (buttonId) => {\n    const button = document.getElementById(buttonId);\n\n    button.addEventListener('click', function(e) {\n        const launchvideocallurl = button.getAttribute('href');\n        requestVideoCall(e, launchvideocallurl);\n    });\n};\n\n/**\n * Handle video form in block to start a video call.\n *\n * @param {String} videocallform The form element which contains data.\n */\nexport const handleVideoCallFormRequest = (videocallform) => {\n    const submit = videocallform.querySelector('input[type=submit]');\n\n    submit.addEventListener('click', function(e) {\n        const formData = new FormData(videocallform);\n        const meetingname = formData.get('videocallname');\n        const viewersid = formData.getAll('videocallviewers[]');\n        const launchvideocallurl = videocallform.getAttribute('action');\n        requestVideoCall(e, launchvideocallurl, viewersid, meetingname);\n    });\n};\n\n/**\n * Start a video call in a new window with the given launch URL and optional parameters.\n *\n * @param {String} e The user event which triggers the call.\n * @param {String} launchvideocallurl The base URL to start with.\n * @param {Array}  viewersid (optional) An array of user ids to invite.\n * @param {String} meetingname (optional) The meeting name.\n */\nexport const requestVideoCall = (e, launchvideocallurl, viewersid, meetingname) => {\n    e.preventDefault();\n\n    if (viewersid) {\n        const viewersparam = viewersid.join(',');\n        launchvideocallurl = `${launchvideocallurl}&viewersid=${viewersparam}`;\n    }\n    if (meetingname) {\n        launchvideocallurl = `${launchvideocallurl}&name=${meetingname}`;\n    }\n\n    window.open(launchvideocallurl);\n};\n"],"names":["buttonId","button","document","getElementById","addEventListener","e","launchvideocallurl","getAttribute","requestVideoCall","videocallform","querySelector","formData","FormData","meetingname","get","viewersid","getAll","preventDefault","viewersparam","join","window","open"],"mappings":"kQAoBsC,SAACA,cAC7BC,OAASC,SAASC,eAAeH,UAEvCC,OAAOG,iBAAiB,SAAS,SAASC,OAChCC,mBAAqBL,OAAOM,aAAa,QAC/CC,iBAAiBH,EAAGC,4DASc,SAACG,eACxBA,cAAcC,cAAc,sBAEpCN,iBAAiB,SAAS,SAASC,OAChCM,SAAW,IAAIC,SAASH,eACxBI,YAAcF,SAASG,IAAI,iBAC3BC,UAAYJ,SAASK,OAAO,sBAC5BV,mBAAqBG,cAAcF,aAAa,UACtDC,iBAAiBH,EAAGC,mBAAoBS,UAAWF,qBAY9CL,iBAAmB,SAACH,EAAGC,mBAAoBS,UAAWF,gBAC/DR,EAAEY,iBAEEF,UAAW,KACLG,aAAeH,UAAUI,KAAK,KACpCb,6BAAwBA,yCAAgCY,cAExDL,cACAP,6BAAwBA,oCAA2BO,cAGvDO,OAAOC,KAAKf"}