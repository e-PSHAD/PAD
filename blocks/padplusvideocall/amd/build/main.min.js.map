{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\nconst Selectors = {\n    DATA_CONTEXT: '[data-contextid]',\n    INPUT_MODE: '[name=videocall-mode]',\n    INPUT_MEETING_LINK: '[data-input=meeting-link]',\n    CONTAINER_MODE_DIRECT: '[data-container=videocall-mode-direct]',\n    CONTAINER_MODE_LINK: '[data-container=videocall-mode-link]',\n    CONTAINER_LINK_INITIAL: '[data-container=videocall-link-initial]',\n    CONTAINER_MEETING_LINK: '[data-container=videocall-meeting-link]',\n    CONTAINER_COPY_SUCCESS: '[data-container=videocall-copy-success]',\n    ACTION_REQUEST_LINK: '[data-action=request-link]',\n    ACTION_RESET_LINK: '[data-action=reset]',\n    ACTION_COPY_LINK: '[data-action=copy]'\n};\n\n/**\n * Setup JS interactions for VideoCall block.\n *\n * @param {Element} root\n */\n export const setupVideoCallBlock = (root) => {\n    const btnsRadio = root.querySelectorAll(Selectors.INPUT_MODE);\n    // Toggle display of direct or link modes for videocalls\n    btnsRadio.forEach(radio => {\n        const directVideoCallGroup = root.querySelector(Selectors.CONTAINER_MODE_DIRECT);\n        const linkVideoCallGroup = root.querySelector(Selectors.CONTAINER_MODE_LINK);\n        radio.addEventListener('change', event => {\n            if (event.target.value === 'direct') {\n                toggleDisplay(linkVideoCallGroup, directVideoCallGroup);\n            } else {\n                toggleDisplay(directVideoCallGroup, linkVideoCallGroup);\n            }\n        });\n    });\n\n    setupVideoCallDirectMode(root);\n    setupVideoCallLinkMode(root);\n};\n\n/**\n * Setup form from videocall_form.php to start a video call\n *\n * @param {Element} root\n */\n function setupVideoCallDirectMode(root) {\n    const directVideoCallGroup = root.querySelector(Selectors.CONTAINER_MODE_DIRECT);\n    const videocallform = directVideoCallGroup.querySelector('form');\n    const submit = videocallform.querySelector('input[type=submit]');\n\n    submit.addEventListener('click', function(e) {\n        const formData = new FormData(videocallform);\n        const viewersid = formData.getAll('videocallviewers[]');\n        const launchvideocallurl = videocallform.getAttribute('action');\n        requestVideoCall(e, launchvideocallurl, viewersid);\n    });\n}\n\n/**\n * Handle click on button to start a video call.\n *\n * Note: this is used on profile pages only.\n *\n * @param {String} buttonId The id of the button element.\n */\nexport const handleVideoCallRequest = (buttonId) => {\n    const button = document.getElementById(buttonId);\n\n    button.addEventListener('click', function(e) {\n        const launchvideocallurl = button.getAttribute('href');\n        requestVideoCall(e, launchvideocallurl);\n    });\n};\n\n/**\n * Start a video call in a new window with the given launch URL and optional parameters.\n *\n * @param {String} e The user event which triggers the call.\n * @param {String} launchvideocallurl The base URL to start with.\n * @param {Array}  viewersid (optional) An array of user ids to invite.\n * @param {String} meetingname (optional) The meeting name.\n */\nexport const requestVideoCall = (e, launchvideocallurl, viewersid, meetingname) => {\n    e.preventDefault();\n\n    if (viewersid) {\n        const viewersparam = viewersid.join(',');\n        launchvideocallurl = `${launchvideocallurl}&viewersid=${viewersparam}`;\n    }\n    if (meetingname) {\n        launchvideocallurl = `${launchvideocallurl}&name=${meetingname}`;\n    }\n\n    window.open(launchvideocallurl);\n};\n\n/**\n * Setup JS interactions for videocall link generation.\n *\n * @param {Element} root\n */\nfunction setupVideoCallLinkMode(root) {\n    // Containers.\n    const initialRequestContainer = root.querySelector(Selectors.CONTAINER_LINK_INITIAL);\n    const meetingLinkContainer = root.querySelector(Selectors.CONTAINER_MEETING_LINK);\n\n    // Input.\n    const meetingLinkInput = root.querySelector(Selectors.INPUT_MEETING_LINK);\n\n    const btnRequestLink = root.querySelector(Selectors.ACTION_REQUEST_LINK);\n    // Handle click on button to request videocall link.\n    btnRequestLink.addEventListener('click', () => {\n        const contextid = root.querySelector(Selectors.DATA_CONTEXT).getAttribute('data-contextid');\n        toggleDisplay(meetingLinkContainer);\n        return requestNewMeetingLink(contextid).then(meetingurl => {\n            meetingLinkInput.setAttribute('value', meetingurl);\n            toggleDisplay(initialRequestContainer, meetingLinkContainer);\n            return;\n        }).catch(Notification.exception);\n    });\n\n    const btnReset = root.querySelector(Selectors.ACTION_RESET_LINK);\n    // Handle click on button to reset videocall block.\n    btnReset.addEventListener('click', function() {\n        // Reset group to initial state\n        toggleDisplay(meetingLinkContainer, initialRequestContainer);\n        meetingLinkInput.setAttribute('value', '');\n\n        // Reset mode selection\n        const linkVideoCallGroup = root.querySelector(Selectors.CONTAINER_MODE_LINK);\n        toggleDisplay(linkVideoCallGroup);\n        const directModeBtn = root.querySelector(Selectors.INPUT_MODE + '[value=link]');\n        directModeBtn.checked = false;\n    });\n\n    const successContainer = root.querySelector(Selectors.CONTAINER_COPY_SUCCESS);\n    const btnCopy = root.querySelector(Selectors.ACTION_COPY_LINK);\n    // Handle click on button to copy videocall link.\n    btnCopy.addEventListener('click', function() {\n        navigator.clipboard.writeText(meetingLinkInput.value);\n\n        toggleDisplay(meetingLinkInput, successContainer);\n        setTimeout(function() {\n            toggleDisplay(successContainer, meetingLinkInput);\n        }, 1200);\n    });\n}\n\n/**\n * Request a new meeting link to share.\n *\n * @param {number} contextid context id in which meeting link generation is authorized\n * @returns {string}\n */\n function requestNewMeetingLink(contextid) {\n    return Ajax.call([{\n        methodname: 'block_padplusvideocall_generate_meeting_link',\n        args: {contextid},\n    }])[0].then(data => data.meetingurl);\n}\n\n/**\n * Toggle display between given elements.\n *\n * @param {Element} elementToHide\n * @param {Element} elementToShow\n */\nfunction toggleDisplay(elementToHide, elementToShow = null) {\n    elementToHide.classList.add('hidden');\n\n    if (elementToShow) {\n        elementToShow.classList.remove('hidden');\n    }\n}\n"],"names":["Selectors","root","querySelectorAll","forEach","radio","directVideoCallGroup","querySelector","linkVideoCallGroup","addEventListener","event","target","value","toggleDisplay","videocallform","e","viewersid","FormData","getAll","launchvideocallurl","getAttribute","requestVideoCall","setupVideoCallDirectMode","initialRequestContainer","meetingLinkContainer","meetingLinkInput","contextid","Ajax","call","methodname","args","then","data","meetingurl","requestNewMeetingLink","setAttribute","catch","Notification","exception","checked","successContainer","navigator","clipboard","writeText","setTimeout","setupVideoCallLinkMode","buttonId","button","document","getElementById","meetingname","preventDefault","viewersparam","join","window","open","elementToHide","elementToShow","classList","add","remove"],"mappings":"6bAkBMA,uBACY,mBADZA,qBAEU,wBAFVA,6BAGkB,4BAHlBA,gCAIqB,yCAJrBA,8BAKmB,uCALnBA,iCAMsB,0CANtBA,iCAOsB,0CAPtBA,iCAQsB,0CARtBA,8BASmB,6BATnBA,4BAUiB,sBAVjBA,2BAWgB,kDAQc,SAACC,MACfA,KAAKC,iBAAiBF,sBAE9BG,SAAQ,SAAAC,WACRC,qBAAuBJ,KAAKK,cAAcN,iCAC1CO,mBAAqBN,KAAKK,cAAcN,+BAC9CI,MAAMI,iBAAiB,UAAU,SAAAC,OACF,WAAvBA,MAAMC,OAAOC,MACbC,cAAcL,mBAAoBF,sBAElCO,cAAcP,qBAAsBE,mCAcjBN,UAEzBY,cADuBZ,KAAKK,cAAcN,iCACLM,cAAc,QAC1CO,cAAcP,cAAc,sBAEpCE,iBAAiB,SAAS,SAASM,OAEhCC,UADW,IAAIC,SAASH,eACHI,OAAO,sBAC5BC,mBAAqBL,cAAcM,aAAa,UACtDC,iBAAiBN,EAAGI,mBAAoBH,cAlB5CM,CAAyBpB,eAiEGA,UAEtBqB,wBAA0BrB,KAAKK,cAAcN,kCAC7CuB,qBAAuBtB,KAAKK,cAAcN,kCAG1CwB,iBAAmBvB,KAAKK,cAAcN,8BAErBC,KAAKK,cAAcN,+BAE3BQ,iBAAiB,SAAS,eAC/BiB,UAAYxB,KAAKK,cAAcN,wBAAwBmB,aAAa,yBAC1EP,cAAcW,+BAyCUE,kBACrBC,cAAKC,KAAK,CAAC,CACdC,WAAY,+CACZC,KAAM,CAACJ,UAAAA,cACP,GAAGK,MAAK,SAAAC,aAAQA,KAAKC,cA5CdC,CAAsBR,WAAWK,MAAK,SAAAE,YACzCR,iBAAiBU,aAAa,QAASF,YACvCpB,cAAcU,wBAAyBC,yBAExCY,MAAMC,sBAAaC,cAGTpC,KAAKK,cAAcN,6BAE3BQ,iBAAiB,SAAS,WAE/BI,cAAcW,qBAAsBD,yBACpCE,iBAAiBU,aAAa,QAAS,IAIvCtB,cAD2BX,KAAKK,cAAcN,gCAExBC,KAAKK,cAAcN,qBAAuB,gBAClDsC,SAAU,SAGtBC,iBAAmBtC,KAAKK,cAAcN,kCAC5BC,KAAKK,cAAcN,4BAE3BQ,iBAAiB,SAAS,WAC9BgC,UAAUC,UAAUC,UAAUlB,iBAAiBb,OAE/CC,cAAcY,iBAAkBe,kBAChCI,YAAW,WACP/B,cAAc2B,iBAAkBf,oBACjC,SA3GPoB,CAAuB3C,uCA4BW,SAAC4C,cAC7BC,OAASC,SAASC,eAAeH,UAEvCC,OAAOtC,iBAAiB,SAAS,SAASM,OAChCI,mBAAqB4B,OAAO3B,aAAa,QAC/CC,iBAAiBN,EAAGI,4BAYfE,iBAAmB,SAACN,EAAGI,mBAAoBH,UAAWkC,gBAC/DnC,EAAEoC,iBAEEnC,UAAW,KACLoC,aAAepC,UAAUqC,KAAK,KACpClC,6BAAwBA,yCAAgCiC,cAExDF,cACA/B,6BAAwBA,oCAA2B+B,cAGvDI,OAAOC,KAAKpC,8BA0EPN,cAAc2C,mBAAeC,qEAAgB,KAClDD,cAAcE,UAAUC,IAAI,UAExBF,eACAA,cAAcC,UAAUE,OAAO"}